library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
--USE IEEE.numeric_std.ALL;

entity data_memory is 
generic (
	addr_length : integer := 10;
	reg_size : integer := 16;
	mem_size: integer := 1024
);
port (
		clk: in std_logic;
		we: in std_logic;
		reset: in std_logic;
		addr: in std_ulogic_vector((addr_length-1) downto 0);
		datai: in std_logic_vector((reg_size-1) downto 0);
		datao: out std_logic_vector((reg_size-1) downto 0)
);
end entity;

architecture data_memory_arch of data_memory is
type mem_array is array (0 to mem_size-1) of std_logic_vector((reg_size-1) downto 0);
signal mem_arr: mem_array;
begin
--	process (reset)
--	begin
--		if reset='1' then
--			mem_arr(0) <= x"0000";
--		end if;
--	end process;
	process (clk, reset)
	begin
		if clk'event and clk='1' then
			if 
				we='1' then mem_arr(conv_integer(unsigned(addr))) <= datai; 
			end if;
			datao <= mem_arr(conv_integer(unsigned(addr)));
		end if;
		if reset='1' then
			mem_arr(0) <= x"0000";
		end if;
	end process;
end architecture;