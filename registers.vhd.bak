library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

-- Register block
entity registers is 
generic (
	addr_length: integer := 4; -- разрядность адреса регистра, 
	reg_size: integer := 16; -- размер регистра
	reg_count: integer := 8 -- кол-во регистров
);
port (
		clk: in std_logic; --тактирование
		we: in std_logic; -- разрешение записи
		reset: in std_logic; -- ресет
		addr: in std_ulogic_vector((addr_length-1) downto 0); --адрес ячейки памяти
		datai: in std_ulogic_vector((reg_size-1) downto 0); --данные для записи в память
		datao: out std_ulogic_vector((reg_size-1) downto 0) --данные, читаемые из памяти
);
end entity registers;

architecture registers_rtl of registers is
type reg_array is array (0 to reg_count-1) of std_ulogic_vector((reg_size-1) downto 0);
signal regs: reg_array;
begin
	process (clk, reset)
	begin
		if (clk'event and clk='1') then
			if we = '1' then
				regs(conv_integer(unsigned(addr))) <= datai;
			end if;
			datao <= regs(conv_integer(unsigned(addr)));
		end if;
		
		if reset='1' then
			regs(0) <= x"0002";
			regs(1) <= x"0004";
			regs(2) <= x"0003";
			regs(3) <= x"0001";
			regs(4) <= x"0005";
			regs(5) <= x"0010";
			regs(6) <= x"0001";
			regs(7) <= x"0001";
		end if;
	end process;
end architecture;
